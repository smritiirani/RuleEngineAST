Project Documentation

# Rule Engine with Abstract Syntax Tree (AST)

## Project Overview

This project implements a Rule Engine that uses an Abstract Syntax Tree (AST) to dynamically represent and evaluate business rules. The Rule Engine allows for the creation, combination, and evaluation of rules based on user-defined conditions.

## Features
- **Create Rules**: Parse rule strings into ASTs.
- **Combine Rules**: Merge multiple rules into a single AST.
- **Evaluate Rules**: Evaluate user attributes against predefined rules.
- **Dynamic Modifications**: Modify rules dynamically.

## Installation and Setup

### Prerequisites
- Python 3.x
- PostgreSQL

### Steps to Setup Locally
1. Clone the repository:
    ```bash
    git clone https://github.com/your-username/rule-engine-ast.git
    cd rule-engine-ast
    ```
2. Set up a virtual environment:
    ```bash
    python3 -m venv venv
    source venv/bin/activate
    ```
3. Install dependencies:
    ```bash
    pip install -r requirements.txt
    ```
4. Database Setup:
   Update PostgreSQL credentials in `config.py`, and create the database.
   
5. Run the application:
    ```bash
    flask run
    ```

## API Endpoints

- `POST /create_rule`: Create a rule from a string.
- `POST /combine_rules`: Combine multiple rules.
- `POST /evaluate_rule`: Evaluate a rule against user data.

## Testing

Run unit tests with:
```bash
python -m unittest discover tests/
